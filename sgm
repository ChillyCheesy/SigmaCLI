#!/usr/bin/env ruby

require "thor"
require "tty-table"
require "io/console"
require "yaml"

require_relative "./title-printer"
require_relative "./get-releases"
require_relative "./modulo-download"
require_relative "./modulo-version"
require_relative "./new-module"


PROMPT = "sgm"
SPINNER = Spinner.new

class Sigma < Thor

    desc "new <module>", "create a new module with the default module configuration"
    long_desc <<-LONGDESC
        > #{PROMPT} new <name>                          - will create a new module with the default module project inititialized.

            It takes one parameter, the name of the module.
            The module folder created will be called <name>Module by convention
            If the name is not provided, the module will be name 'NewModule'
    LONGDESC
    def new(name="New")
        new_module(name[0].upcase + name[1..-1])
    end

    option :modulo, aliases: "-m", banner:"", desc: "Use this flag to install modulo's server"
    option :version, aliases: "-v", desc: "The version of the modulo server to install (only works if you use the -modulo or -m flag)"
    desc "install <module>", "install a module or a Modulo server"
    long_desc <<-LONGDESC
        > #{PROMPT} install <name>                      - will install a module.

            It takes one parameter, the name of the module.
            The name of the module must be provided to the command.
            
        > #{PROMPT} install -modulo                     - will install a Modulo server on the current repertory.

            It takes no parameter and it will let you choose the version of the Modulo server to install.
            
        > #{PROMPT} install -modulo -version <version>  - will install a Modulo server on the current repertory with the selected version.
    LONGDESC
    def install()
        if options[:modulo]
            download_modulo(options[:version])
        else
            puts "Installing module #{name}"
        end
    end


    option :modulo, aliases: "-m", banner:"", desc: "Use this flag to print the version available for modulo"
    desc "version", "print the version of SigmaCLI or the version available of Modulo with the flag -m"
    def version
        if options[:modulo]
            print_modulo_version
        else
            print_title
            yml = YAML.load_file(File.join(File.dirname(__FILE__), "./sigma.yml"))
            puts "SigmaCLI : " + yml["version"]
        end
    end
end


class Thor
    module Shell
        class Basic
            def print_wrapped(message, options = {})
                stdout.puts message
            end
        end
    end
end

if ARGV.empty?
    print_title
end


Sigma.start(ARGV)